apiVersion: apps/v1
kind: Deployment
metadata:
  name: credit-risk-inference
  namespace: credit-risk-ai
  labels:
    app.kubernetes.io/name: credit-risk-inference
    app.kubernetes.io/component: inference
    app.kubernetes.io/part-of: credit-risk-ai
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: credit-risk-inference
  template:
    metadata:
      labels:
        app.kubernetes.io/name: credit-risk-inference
        app.kubernetes.io/component: inference
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: inference
        image: credit-risk-ai:inference
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: MODEL_PATH
          value: "/app/models"
        - name: INFERENCE_BATCH_SIZE
          value: "32"
        - name: INFERENCE_TIMEOUT
          value: "30"
        - name: CACHE_PREDICTIONS
          value: "true"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/1"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: credit-risk-ai-secrets
              key: REDIS_PASSWORD
        envFrom:
        - configMapRef:
            name: credit-risk-ai-config
        volumeMounts:
        - name: models
          mountPath: /app/models
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 4
            memory: 8Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 60  # Allow more time for model loading
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: models-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: compute-optimized
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - credit-risk-inference
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: credit-risk-inference-service
  namespace: credit-risk-ai
  labels:
    app.kubernetes.io/name: credit-risk-inference
    app.kubernetes.io/component: inference
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: credit-risk-inference

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: credit-risk-inference-hpa
  namespace: credit-risk-ai
  labels:
    app.kubernetes.io/name: credit-risk-inference
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: credit-risk-inference
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: inference_requests_per_second
      target:
        type: AverageValue
        averageValue: "50"
  - type: Pods
    pods:
      metric:
        name: inference_latency_p95
      target:
        type: AverageValue
        averageValue: "100m"  # 100ms
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: credit-risk-inference-pdb
  namespace: credit-risk-ai
  labels:
    app.kubernetes.io/name: credit-risk-inference
    app.kubernetes.io/component: inference
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: credit-risk-inference